name: 🔧 Manual Deploy

on:
  workflow_dispatch:
    inputs:
      target:
        description: '배포 대상 선택'
        required: true
        default: 'testpypi'
        type: choice
        options:
        - testpypi
        - pypi
        - both
      version_bump:
        description: '버전 업데이트 타입'
        required: false
        default: 'none'
        type: choice
        options:
        - none
        - patch
        - minor
        - major

permissions:
  contents: write  # 버전 업데이트를 위해 필요

jobs:
  version-bump:
    name: 📈 Version Bump
    runs-on: ubuntu-latest
    if: ${{ inputs.version_bump != 'none' }}
    
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
        
    - name: 📈 Bump version
      id: bump
      run: |
        # 현재 버전 읽기
        current_version=$(python -c "
        import configparser
        config = configparser.ConfigParser()
        config.read('pyproject.toml', encoding='utf-8')
        with open('pyproject.toml', 'r') as f:
            content = f.read()
            import re
            match = re.search(r'version = \"([^\"]+)\"', content)
            if match:
                print(match.group(1))
            else:
                print('1.0.0')
        ")
        
        echo "현재 버전: $current_version"
        
        # 버전 증가 로직
        IFS='.' read -ra VERSION_PARTS <<< "$current_version"
        major=${VERSION_PARTS[0]}
        minor=${VERSION_PARTS[1]}
        patch=${VERSION_PARTS[2]}
        
        case "${{ inputs.version_bump }}" in
          "major")
            major=$((major + 1))
            minor=0
            patch=0
            ;;
          "minor")
            minor=$((minor + 1))
            patch=0
            ;;
          "patch")
            patch=$((patch + 1))
            ;;
        esac
        
        new_version="$major.$minor.$patch"
        echo "새 버전: $new_version"
        echo "new_version=$new_version" >> $GITHUB_OUTPUT
        
        # pyproject.toml 업데이트
        sed -i "s/version = \".*\"/version = \"$new_version\"/" pyproject.toml
        
        # __init__.py 업데이트
        sed -i "s/__version__ = \".*\"/__version__ = \"$new_version\"/" src/vertex_ai_imagen/__init__.py
        
        # 변경사항 커밋
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml src/vertex_ai_imagen/__init__.py
        git commit -m "🏷️ Bump version to $new_version" || echo "No changes to commit"
        git push || echo "No changes to push"

  build:
    name: 📦 Build Package
    runs-on: ubuntu-latest
    needs: [version-bump]
    if: always() && (needs.version-bump.result == 'success' || needs.version-bump.result == 'skipped')
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}
        
    - name: 🔄 Pull latest changes
      run: git pull origin ${{ github.ref_name }}
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
        
    - name: 🔧 Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: 🏗️ Build package
      run: python -m build
      
    - name: 🔍 Check package
      run: twine check dist/*
      
    - name: 📤 Upload distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  deploy-testpypi:
    name: 🧪 Deploy to TestPyPI
    needs: [build]
    runs-on: ubuntu-latest
    if: ${{ inputs.target == 'testpypi' || inputs.target == 'both' }}
    
    environment:
      name: testpypi
      url: https://test.pypi.org/p/vertex-ai-imagen
      
    permissions:
      id-token: write
      
    steps:
    - name: 📥 Download distribution packages
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        
    - name: 🧪 Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/

  deploy-pypi:
    name: 🎉 Deploy to PyPI
    needs: [build, deploy-testpypi]
    runs-on: ubuntu-latest
    if: ${{ (inputs.target == 'pypi' || inputs.target == 'both') && (needs.deploy-testpypi.result == 'success' || needs.deploy-testpypi.result == 'skipped') }}
    
    environment:
      name: pypi
      url: https://pypi.org/p/vertex-ai-imagen
      
    permissions:
      id-token: write
      
    steps:
    - name: 📥 Download distribution packages
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        
    - name: 🎉 Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1 